import express from "express";
import cors from "cors";
import nodemailer from "nodemailer";

const app = express();
const PORT = process.env.PORT || 5000;

// Use built-in JSON middleware
app.use(cors());
app.use(express.json());

// Simulated database
const transactions = [];
const fraudReports = [];

// Check required env vars
const { ADMIN_EMAIL, ADMIN_PASS, BANK_EMAIL } = process.env;
if (!ADMIN_EMAIL || !ADMIN_PASS || !BANK_EMAIL) {
  console.warn("Warning: ADMIN_EMAIL, ADMIN_PASS, and BANK_EMAIL env vars must be set.");
}

// Email sender setup
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: ADMIN_EMAIL,
    pass: ADMIN_PASS,
  },
});

// 🚨 Fraud Detection Utility
function detectFraud(transaction) {
  const { ip, deviceId, payerId } = transaction;

  const recentTransactions = transactions.slice(-20);
  const sameIP = recentTransactions.filter((t) => t.ip === ip).length;
  const sameDevice = recentTransactions.filter((t) => t.deviceId === deviceId).length;
  const samePayerClaims = transactions.filter((t) => t.payerId === payerId && t.claimed).length;

  const fraudScore = sameIP > 3 || sameDevice > 3 || samePayerClaims > 2;

  return fraudScore
    ? {
        fraudType: "Suspicious Pattern Detected",
        evidence: {
          ip,
          deviceId,
          sameIP,
          sameDevice,
          claimCount: samePayerClaims,
        },
      }
    : null;
}

// 📩 Notify Admin
async function sendFraudAlertEmail(report) {
  if (!ADMIN_EMAIL || !BANK_EMAIL) {
    console.error("Missing email configuration; cannot send alert.");
    return;
  }
  const message = {
    from: ADMIN_EMAIL,
    to: BANK_EMAIL,
    subject: "🚨 Fraud Detected on Aegis Payment",
    text: `Fraud Detected:\n\n${JSON.stringify(report, null, 2)}`,
  };

  try {
    await transporter.sendMail(message);
    console.log("Fraud email sent to bank.");
  } catch (err) {
    console.error("Failed to send fraud email:", err.message);
  }
}

// ✅ Receive and store transaction
app.post("/api/transactions", async (req, res) => {
  const tx = req.body;

  // Validate required fields
  if (
    typeof tx.amount !== "number" ||
    !tx.ip ||
    !tx.deviceId ||
    !tx.payerId
  ) {
    return res.status(400).json({ status: "error", message: "Invalid transaction data" });
  }

  const insuranceFee = tx.amount * 0.02;
  const platformFee = insuranceFee * 0.25;
  const sellerShare = insuranceFee * 0.75;

  const transaction = {
    ...tx,
    insuranceFee,
    platformFee,
    sellerShare,
    claimed: false,
    timestamp: new Date().toISOString(),
  };

  transactions.push(transaction);

  const fraudDetected = detectFraud(transaction);
  if (fraudDetected) {
    const fraudReport = {
      ...fraudDetected,
      ...transaction,
      timestamp: new Date().toISOString(),
    };

    fraudReports.push(fraudReport);
    // Email alert, but don't block transaction if it fails
    await sendFraudAlertEmail(fraudReport);
  }

  res.json({ status: "success", message: "Transaction recorded", fraud: !!fraudDetected });
});

// 🛠 Admin: Get all transactions
app.get("/api/admin/transactions", (req, res) => {
  res.json(transactions);
});

// 🛠 Admin: Get fraud reports
app.get("/api/admin/fraud-reports", (req, res) => {
  res.json(fraudReports);
});

// 📍 Root
app.get("/", (req, res) => {
  res.send("Aegis backend is live");
});

app.listen(PORT, () => {
  console.log(`✅ Aegis backend running at http://localhost:${PORT}`);
});

