from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime
import uuid

app = Flask(__name__)
CORS(app)

# Simulated database
transactions = []
fraud_reports = []

@app.route("/api/insure", methods=["POST"])
def insure():
    data = request.get_json()

    transaction = {
        "transaction_id": data.get("transaction_id"),
        "amount": data.get("amount"),
        "insured": data.get("insured"),
        "insurance_fee": data.get("insurance_fee"),
        "timestamp": datetime.now().isoformat(),
        "ip": request.remote_addr,
        "device_id": request.headers.get("X-Device-ID", "unknown-device"),
    }

    # Fraud pattern detection
    fraud = detect_fraud(transaction)
    transaction["fraud"] = fraud

    if fraud:
        fraud_report = {
            "id": str(uuid.uuid4()),
            "transaction_id": transaction["transaction_id"],
            "reason": "Suspicious transaction patterns",
            "ip": transaction["ip"],
            "device_id": transaction["device_id"],
            "timestamp": transaction["timestamp"]
        }
        fraud_reports.append(fraud_report)
        notify_admin(fraud_report)

    transactions.append(transaction)
    return jsonify({"status": "success", "fraud_detected": fraud})

def detect_fraud(txn):
    risky_amount = float(txn["amount"]) > 10000
    repeated_device = any(t["device_id"] == txn["device_id"] for t in transactions[-5:])
    same_ip_claims = sum(1 for t in transactions if t["ip"] == txn["ip"]) > 3

    return risky_amount or repeated_device or same_ip_claims

def notify_admin(report):
    print("Fraud alert: ", report)
    # Add SMS/email integration here

if __name__ == "__main__":
    app.run(debug=True, port=5000)


