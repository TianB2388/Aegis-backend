// --- Backend (Aegis Backend - Express API) ---

import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

// In-memory "database"
const transactions = [];
const fraudAlerts = [];

// --- Utility: Simple fraud detection logic ---
function detectFraud(transaction, recentDeviceIds) {
  const alerts = [];

  if (transaction.sender_ip === transaction.recipient_ip) {
    alerts.push("Sender and recipient share the same IP address.");
  }

  if (recentDeviceIds.includes(transaction.device_id)) {
    alerts.push("Repeated device ID for multiple transactions.");
  }

  if (transaction.claims_history > 2) {
    alerts.push("User has made multiple claims recently.");
  }

  return alerts;
}

// --- Email sender setup ---
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// --- Utility: Send fraud alert email ---
function sendFraudAlertEmail(alertDetails) {
  const message = {
    from: `Aegis Fraud Alerts <${process.env.EMAIL_USER}>`,
    to: 'admin@aegis-protection.com',
    subject: '⚠️ Fraud Detected in Transaction',
    text: JSON.stringify(alertDetails, null, 2),
  };

  transporter.sendMail(message, (err, info) => {
    if (err) {
      console.error("Failed to send fraud alert email:", err);
    } else {
      console.log("Fraud alert email sent:", info.response);
    }
  });
}

// --- Endpoint: Create transaction ---
app.post('/api/aegis/protect', (req, res) => {
  const transaction = req.body;

  // Validate required fields
  const requiredFields = ['sender_ip', 'recipient_ip', 'device_id', 'claims_history'];
  for (let field of requiredFields) {
    if (!transaction[field]) {
      return res.status(400).json({ error: `Missing required field: ${field}` });
    }
  }

  // Get recent device IDs for comparison
  const recentDeviceIds = transactions.map(t => t.device_id);

  // Detect fraud
  const fraudFlags = detectFraud(transaction, recentDeviceIds);

  if (fraudFlags.length > 0) {
    transaction.status = 'flagged';
    transaction.fraudFlags = fraudFlags;
    fraudAlerts.push(transaction);
    sendFraudAlertEmail(transaction);
  } else {
    transaction.status = 'clean';
  }

  transactions.push(transaction);
  res.status(201).json({ success: true, status: transaction.status, fraudFlags });
});

// --- Admin Endpoints ---
app.get('/api/aegis/admin/transactions', (req, res) => {
  res.json(transactions);
});

app.get('/api/aegis/admin/fraud-alerts', (req, res) => {
  res.json(fraudAlerts);
});

// --- Health Check ---
app.get('/', (req, res) => {
  res.send("Aegis API running");
});

// --- Start Server ---
app.listen(PORT, () => {
  console.log(`✅ Aegis API running on port ${PORT}`);
});


