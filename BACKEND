// --- Backend (Aegis Backend - Express API) ---

import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import nodemailer from 'nodemailer';

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

// Mock database
const transactions: any[] = [];
const fraudAlerts: any[] = [];

// Utility - fraud detection logic
function detectFraud(transaction: any) {
  const alerts: string[] = [];

  if (transaction.sender_ip === transaction.recipient_ip) {
    alerts.push("Sender and recipient share the same IP address.");
  }
  if (transaction.device_id === transaction.previous_device_id) {
    alerts.push("Repeated device ID for multiple high-value transactions.");
  }
  if (transaction.claims_history > 2) {
    alerts.push("User has made multiple claims recently.");
  }

  return alerts;
}

// Email sender setup (mock credentials)
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'aegis.alerts@gmail.com',
    pass: 'yourpasswordhere',
  },
});

function sendFraudAlertEmail(alertDetails: any) {
  const message = {
    from: 'Aegis Fraud Alerts <aegis.alerts@gmail.com>',
    to: 'admin@aegis-protection.com',
    subject: '⚠️ Fraud Detected in Transaction',
    text: JSON.stringify(alertDetails, null, 2),
  };

  transporter.sendMail(message, (err, info) => {
    if (err) {
      console.error("Failed to send fraud alert email:", err);
    } else {
      console.log("Fraud alert email sent:", info.response);
    }
  });
}

// Create transaction endpoint
app.post('/api/aegis/protect', (req, res) => {
  const transaction = req.body;

  // Fraud check
  const fraudFlags = detectFraud(transaction);

  if (fraudFlags.length > 0) {
    transaction.status = 'flagged';
    transaction.fraudFlags = fraudFlags;
    fraudAlerts.push(transaction);
    sendFraudAlertEmail(transaction);
  } else {
    transaction.status = 'clean';
  }

  transactions.push(transaction);
  res.status(201).json({ success: true, status: transaction.status, fraudFlags });
});

// Admin view: Get all transactions
app.get('/api/aegis/admin/transactions', (req, res) => {
  res.json(transactions);
});

// Admin view: Get fraud alerts
app.get('/api/aegis/admin/fraud-alerts', (req, res) => {
  res.json(fraudAlerts);
});

// Health check
app.get('/', (req, res) => {
  res.send("Aegis API running");
});

app.listen(PORT, () => {
  console.log(`Aegis API running on port ${PORT}`);
});


