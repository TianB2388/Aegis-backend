import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { useState } from "react";

export default function AegisClientPortal() {
  const [insuranceEnabled, setInsuranceEnabled] = useState(true);
  const [paymentAmount, setPaymentAmount] = useState(0);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string | null>(null);

  const insuranceFee = paymentAmount * 0.02;

  const handleToggleInsurance = (enabled: boolean) => {
    setInsuranceEnabled(enabled);
  };

  const handlePayment = async () => {
    if (paymentAmount <= 0) {
      setResult("Please enter a valid payment amount.");
      return;
    }

    setLoading(true);
    setResult(null);

    // Mock transaction data (backend expects these)
    const transaction = {
      sender_ip: "192.168.1.2",              // Normally youâ€™d get this server-side
      recipient_ip: "192.168.1.3",           // Mocked here
      device_id: "device-abc-123",           // Could be from localStorage or fingerprinting lib
      claims_history: insuranceEnabled ? 0 : 3, // Simulate risky user if insurance is off
      amount: paymentAmount,
    };

    try {
      const response = await fetch("http://localhost:5000/api/aegis/protect", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(transaction),
      });

      const data = await response.json();

      if (data.success) {
        setResult(`Transaction ${data.status.toUpperCase()}${data.fraudFlags.length > 0 ? `: ${data.fraudFlags.join(', ')}` : ''}`);
      } else {
        setResult("Something went wrong. Try again.");
      }
    } catch (err) {
      console.error(err);
      setResult("Server error. Please try later.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-6 bg-gray-50">
      <Card className="w-full max-w-md">
        <CardContent className="p-6">
          <h2 className="text-2xl font-semibold mb-4 text-center">Aegis Insurance Option</h2>

          <div className="mb-4">
            <label htmlFor="amount" className="block text-sm font-medium text-gray-700">
              Enter Payment Amount (R)
            </label>
            <input
              id="amount"
              type="number"
              value={paymentAmount === 0 ? "" : paymentAmount}
              onChange={(e) => setPaymentAmount(Number(e.target.value))}
              placeholder="e.g. 1000"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>

          <div className="flex items-center justify-between mb-2">
            <label htmlFor="insurance" className="text-sm font-medium text-gray-800">
              Enable Aegis Protection (2%)
            </label>
            <Switch
              id="insurance"
              checked={insuranceEnabled}
              onCheckedChange={handleToggleInsurance}
            />
          </div>

          {insuranceEnabled && paymentAmount > 0 && (
            <p className="text-sm text-blue-600 mt-2">
              Aegis will cover up to R{paymentAmount.toFixed(2)}. Premium: R{insuranceFee.toFixed(2)}
            </p>
          )}

          {!insuranceEnabled && paymentAmount > 0 && (
            <p className="text-sm text-gray-500 mt-2">
              You are proceeding without Aegis protection.
            </p>
          )}

          <Button className="w-full mt-6" onClick={handlePayment} disabled={loading}>
            {loading ? "Processing..." : "Continue Payment"}
          </Button>

          {result && (
            <p className="text-center text-sm mt-4 text-gray-700">{result}</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}



