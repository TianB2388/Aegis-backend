import express from "express";
import cors from "cors";
import bodyParser from "body-parser";
import nodemailer from "nodemailer";

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

// Simulated database
const transactions = [];
const fraudReports = [];

// Email sender (e.g., Gmail SMTP — secure this in production)
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.ADMIN_EMAIL,
    pass: process.env.ADMIN_PASS,
  },
});

// 🚨 Fraud Detection Utility
function detectFraud(transaction) {
  const { ip, deviceId, payerId } = transaction;

  const recentTransactions = transactions.slice(-20);
  const sameIP = recentTransactions.filter((t) => t.ip === ip).length;
  const sameDevice = recentTransactions.filter((t) => t.deviceId === deviceId).length;
  const samePayerClaims = transactions.filter((t) => t.payerId === payerId && t.claimed).length;

  const fraudScore = sameIP > 3 || sameDevice > 3 || samePayerClaims > 2;

  return fraudScore ? {
    fraudType: "Suspicious Pattern Detected",
    evidence: {
      ip,
      deviceId,
      sameIP,
      sameDevice,
      claimCount: samePayerClaims,
    },
  } : null;
}

// 📩 Notify Admin
async function sendFraudAlertEmail(report) {
  const message = {
    from: process.env.ADMIN_EMAIL,
    to: process.env.BANK_EMAIL,
    subject: "🚨 Fraud Detected on Aegis Payment",
    text: `Fraud Detected:\n\n${JSON.stringify(report, null, 2)}`,
  };

  try {
    await transporter.sendMail(message);
    console.log("Fraud email sent to bank.");
  } catch (err) {
    console.error("Failed to send fraud email:", err.message);
  }
}

// ✅ Receive and store transaction
app.post("/api/transactions", async (req, res) => {
  const tx = req.body;

  const insuranceFee = tx.amount * 0.02;
  const platformFee = insuranceFee * 0.25;
  const sellerShare = insuranceFee * 0.75;

  const transaction = {
    ...tx,
    insuranceFee,
    platformFee,
    sellerShare,
    claimed: false,
    timestamp: new Date().toISOString(),
  };

  transactions.push(transaction);

  const fraudDetected = detectFraud(transaction);
  if (fraudDetected) {
    const fraudReport = {
      ...fraudDetected,
      ...transaction,
      timestamp: new Date().toISOString(),
    };

    fraudReports.push(fraudReport);
    await sendFraudAlertEmail(fraudReport);
  }

  res.json({ status: "success", message: "Transaction recorded", fraud: !!fraudDetected });
});

// 🛠 Admin: Get all transactions
app.get("/api/admin/transactions", (req, res) => {
  res.json(transactions);
});

// 🛠 Admin: Get fraud reports
app.get("/api/admin/fraud-reports", (req, res) => {
  res.json(fraudReports);
});

// 📍 Root
app.get("/", (req, res) => {
  res.send("Aegis backend is live");
});

app.listen(PORT, () => {
  console.log(`✅ Aegis backend running at http://localhost:${PORT}`);
});



